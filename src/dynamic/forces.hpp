#pragma once
#include <Eigen/Dense>
#include "common.hpp"
#include "matrices.hpp"

using namespace Eigen;

class Forces {
public:
  /// @brief Calculates gravity loads acting on UAV
  /// @param r_nb rotation matrix from world to body frame
  /// @return gravity load in body frame
  static Vector<double, 6> gravity_loads(const Matrix3d &r_nb);

  /// @brief Calculates loads generated by rotors
  /// @param noOfRotors numbers of rotors
  /// @param rotors pointer to rotor instance
  /// @param rotorAngularVelocity vector of angular velocities of rotors
  /// @return loads in body frame
  static Vector<double, 6> rotor_lift_loads(int noOfRotors, Rotor *rotors,
                                            VectorXd rotorAngularVelocity);

  /// @brief Calculates loads generated by jet
  /// @param noOfJets numbers of jets
  /// @param jets pointer to jet instance
  /// @param time simulation time
  /// @return loads in body frame
  static Vector<double, 6> jet_lift_loads(int noOfJets, Jet *jets, double time);

  /// @brief Calculates aerodynamic loads 
  /// @param x vector of UAV velocities
  /// @param wind_body vector of wind acting on UAV
  /// @param surface reference to ControlSurfaces instance
  /// @param aero reference to AeroCoefficients instance
  /// @param height absolute height about sea (AMSL)
  /// @return loads in body frame
  static Vector<double, 6> aerodynamic_loads(const Vector<double, 6> &x,
                                             Vector3d wind_body,
                                             const ControlSurfaces &surface,
                                             const AeroCoefficients &aero,
                                             double height);

  /// @brief Calculates acceleration of propellers
  /// @param demandedAngularVelocity vector of demanded angular velocities
  /// @param rotorAngularVelocity vector of actual angular velocities
  /// @return vector of angular accelerations
  static VectorXd angularAcceleration(VectorXd demandedAngularVelocity,
                                      VectorXd rotorAngularVelocity);

  /// @brief Generates aerodynamics characteristics and save in csv files
  /// @param surface reference to ControlSurfaces instance
  /// @param aero reference to AeroCoefficients instance
  static void generateCharacteristics(const ControlSurfaces &surface,
                                      const AeroCoefficients &aero);

private:
  /// @brief Calculates dynamic pressure acting on UAV
  /// @param height absolute height about sea (AMSL)
  /// @param Vtot Norm of velocity vector
  /// @return dynamic pressure Pa
  static double dynamic_pressure(double height, double Vtot);

  /// @brief Returns air density kg/m3
  /// @return air density kg/m
  static double getRho();

  /// @brief Calculates vector of aerodynamic coefficients
  /// @param surface 
  /// @param aero 
  /// @param alpha 
  /// @param beta 
  /// @param Vtot 
  /// @param PQR 
  /// @return 
  static Vector<double, 6> calc_aero_coefficients(const ControlSurfaces &surface,
                                                 const AeroCoefficients &aero,
                                                 double alpha,
                                                 double beta,
                                                 double Vtot,
                                                 Vector3d PQR);
};
